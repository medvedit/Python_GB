#  Ускоренная обработка данных: lambda, filter, map, zip, enumerate, List Comprehension
# ______________________________________________________________________________________________________

#  lambda : -----------------

def f(x):
    return x**2
# Можем положить функцию в переменную:
g = f # Переменная, которая хранит ссылку на функцию.
print(type(f)) # <class 'function'>
print(type(g)) # <class 'function'>
# Вызывать как функцию, так и переменную:
print(f(4)) # 16
print(g(4)) # 16

# Далее...
# С одной переменной:

def calc_1(x):
    return x + 10


def calc_2(x):
    return x * 10

def math(op, x):
    print(op(x))

math(calc_2, 10) # 100
math(calc_1, 10) # 20

# Далее...
# С двумя переменными:

# def sum(x, y):
#     return x + y

sum = lambda x, y : x +y

f = sum

def mult(x, y):
    return x * y

def calc(op, a, b):
    print(op(a, b))
    # return op(a, b)

calc(mult, 4, 5) # 20
calc(f, 4, 5) # 9
calc(sum, 6, 9) # 15
calc(lambda x, y : x + y +3, 4, 5) # 12


# Создаём список:
# List Comprehension: # Понимание списка:

# [exp for item in iterable] # exp для элемента в итерации
# [exp for item in iterable (if conditional)] # exp для элемента в итерации (если условно)
# [ exp <if conditional> for item in iterable (if conditional)] # exp <если условно> для элемента в итерации (если условно)

list_1 = []
for i in range(1, 11):
    if i%2 == 0:
        list_1.append(i)

print(list_1) # [2, 4, 6, 8, 10]

# Или...

list_1 = [i for i in range(1, 16)]
print(list_1) # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]

# + проверка на четность:

list_1 = [i for i in range(1, 16) if i%2 == 0]
print(list_1) # [2, 4, 6, 8, 10, 12, 14]

# + Вывод картежем:

list_1 = [(i, i) for i in range(1, 16) if i%2 == 0]
print(list_1) # [(2, 2), (4, 4), (6, 6), (8, 8), (10, 10), (12, 12), (14, 14)]

# еще применение:

def f(x):
    return x**3

list_1 = [f(i) for i in range(1, 16) if i%2 == 0]
print(list_1) # [8, 64, 216, 512, 1000, 1728, 2744]

# Или :

list_1 = [(i, f(i)) for i in range(1, 16) if i%2 == 0]
print(list_1) # [(2, 8), (4, 64), (6, 216), (8, 512), (10, 1000), (12, 1728), (14, 2744)] # Число и его куб

# Задача№ 1:
# В файле хранятся числа, нужно выбрать четные и составить список пар (число; квадрат числа). Пример:
# 1 2 3 5 8 15 23 38
# Получить:
# [(2, 4), (8, 64), (38, 1444)]

def f(x):
    return x**2

list_1 = [(i, f(i)) for i in (1, 2, 3, 5, 8, 15, 23, 38) if i%2 == 0]
print(list_1) # [(2, 4), (8, 64), (38, 1444)]

#  решение от Сергея:

path = '/Users/Medwed_SA/Desktop/Education/Python/Знакомство с языком Python/Lecture_end_Seminare/Python_GB/Lecture/file_1.txt'
f = open(path, 'r')
data = f.read() + ' '
f.close()

numbers = []

while data != '':
    space_pos = data.index(' ')
    numbers.append(int(data[:space_pos]))
    data = data[space_pos+1:]

out = []
for i in numbers:
    if not i % 2:
        out.append((i, i**2))

print(out) # [(2, 4), (8, 64), (38, 1444)]

# Далее...
#  Предположим, что у нас есть две функции:

# def select(f, col):
#     return [f(x) for x in col]
#  Вместо select => добавляем функцию map


# def where(f, col):
#     return [x for x in col if f(x)]
# Вместо where => добавляем функцию filter


data = '1 2 3 5 8 15 23 38'.split()

res = map(int, data)                           # было    res = select(int, data) + функция 133 + 135
res_1 = list(filter(lambda x: not x % 2, res)) # было    es_1 = where(lambda x: not x % 2, res) + функция 138 + 140
res_2 = list(map(lambda x: (x, x**2), res_1))  # было    res_2 = select(lambda x: (x, x**2), res_1) + функция 133 + 135
print(res) # <map object at 0x1078a2fe0>
print(res_1) # [2, 8, 38]
print(res_2) # [(2, 4), (8, 64), (38, 1444)]

# ========================================================  Функция map ====================================================

# Функция map() применяет указанную функцию к каждому элементу итерируемого объекта и возвращает итератор с новыми объектами.
# f(x) ⇒ x + 10
#   map(f,[ 1,  2,  3,  4,  5])
#           ↓   ↓   ↓   ↓   ↓
#        [ 11, 12, 13, 14, 15]
#  Нельзя пройтись дважды

li = [x for x in range(1, 10)]
print(li) # [1, 2, 3, 4, 5, 6, 7, 8, 9]
li = list(map(lambda x: x+10, li))
print(li) # [11, 12, 13, 14, 15, 16, 17, 18, 19]

# еще вариант:

data = list(map(int, input('Введите числа через пробел: ').split()))
print(data) # [1, 23, 45, 3, 44, 5, 334, 67] то, что введете выше. в строке 167

# ======================================================== Функция filter ===============================================
# Функция filter() применяет указанную функцию к каждому элементу итерируемого объекта и возвращает итератор с теми объектами,
# для которых функция вернула True.
# f(x) ⇒ x - чётное filter(f, [ 1, 2, 3, 4, 5])
#                                  ↓     ↓
#                             [    2,    4   ]
#    Нельзя пройтись дважды

data = [x for x in range(10)]
res = list(filter(lambda x:  not x%2, data))
print(res) # [0, 2, 4, 6, 8]

# ============================================================ Функция zip ==================================================================
# Функция zip() применяется к набору итерируемых объектов и возвращает итератор с кортежами из элементов входных данных.
# Количество элементов в результате равно минимальному количеству элементов входного набора
#  zip ([1, 2, 3], [ ‘о‘, ‘д‘, ‘т‘], [‘f’,’s’,’t’])
#        1  2  3      1    2    3      1   2   3

#      1   1     1    2    2   2     3    3   3
#    [(1, 'о', 'f'), (2, 'д', 's'), (3, 'т', 't')]
#  Нельзя пройтись дважды
# ______________________________________________________
user = ['user1', 'user2', 'user3','user4', 'user5']
ids = [1, 2, 3, 44, 5]

data = list(zip(user, ids))
print(data) # [('user1', 1), ('user2', 2), ('user3', 3), ('user4', 44), ('user5', 5)]
# ______________________________________________________

user = ['user1', 'user2', 'user3','user4', 'user5']
ids = [1, 2, 3]

data = list(zip(user, ids))
print(data) # [('user1', 1), ('user2', 2), ('user3', 3)]
# ______________________________________________________

user = ['user1', 'user2', 'user3','user4', 'user5']
ids = [1, 2, 3, 4, 5]
salary = [111, 222, 333]

data = list(zip(user, ids, salary))
print(data) # [('user1', 1, 111), ('user2', 2, 222), ('user3', 3, 333)]
# ______________________________________________________

# ============================================================ Функция enumerate ==================================================================
# Функция enumerate() применяется к итерируемому объекту и возвращает новый итератор с кортежами из индекса и элементов входных данных.
#  enumerate(['Казань', 'Смоленск', 'Рыбки', 'Чикаго'])
#                         ↓
#        [(0, 'Казань'), (1, 'Смоленск'), (2, 'Рыбки'), (3, 'Чикаго')]
#  Нельзя пройтись дважды

user = ['user1', 'user2', 'user3','user4', 'user5']

data = list(enumerate(user))
print(data) # [(0, 'user1'), (1, 'user2'), (2, 'user3'), (3, 'user4'), (4, 'user5')]



