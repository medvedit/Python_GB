# ======================================================= Методы в list (список): ==============================================================
#                   'append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort'
# ______________________________________ append _________________________________________
# append() добавляет в конец списка элемент, переданный ему в качестве аргумента.
a = [1, 2, 'stroka', True] # Создали список a.
b = [34, 43, 12, 2] # Содали список b.
a.append(22) # Добавили в список а  значение 22. добавляется в конец списка.
print(a) # [1, 2, 'stroka', True, 22]
a.append(b) # Добавили в список a список b. Добавляется списком! В конец списка a.
print(a) # [1, 2, 'stroka', True, 22, [34, 43, 12, 2]]
a.append(2) # Добавили в список a значение 2.
print(a) # [1, 2, 'stroka', True, 22, [34, 43, 12, 2], 2]
print(a.count(2)) # 2    (С помощью метода .count(аргумент), посчитали колличество значения 2
                        # Во вложенные списки методом .count(аргумент) вода нет, поэтому ответ 2.

print(type(a)) # <class 'list'>


ls=["+7912123456","+79152123456","+69152123456","+49152123456","+791522222222"]
ls1 = []
for i in ls:
    if '+7' in i: # ищем номера начинающиеся с +7
        ls1.append(i)
print(ls1) # ['+7912123456', '+79152123456', '+791522222222']

ls=["+7912123456","+79152123456","+69152123456","+49152123456","+791522222222"]
ls1 = []
for i in ls:
    if not '+7' in i: # добавили nit и ищем номера  НЕ начинающиеся с +7
        ls1.append(i)
print(ls1)# ['+69152123456', '+49152123456']

# ______________________________________ extend() _________________________________________
# extend() принимает в качестве параметра итерируемый объект и объединяет его со списком.
a.extend(b) # Метод добавил и распаковал список b в конец существующего (выше по коду) списка a
print(a) # # [1, 2, 'stroka', True, 22, [34, 43, 12, 2], 2, 34, 43, 12, 2]

# _______________________________________ clear и del ____________________________________________
# Метод .clear() производит удаление всех элементов из последовательности.
# Операция удаления всех элементов из последовательности
x = [1, 2, 44, 'text', True]
x.clear() # Удаляем все элементы списка x.
print(x) # []

# Для удаления элемента из списка можно использовать ключевое слово del с названием списка после него.
# Также потребуется передать индекс того элемента, который нужно удалить.

# Синтаксис: del list[index] - удаляет элемент по индексу
#            del list[:] - удаляет весь список
#            del list[start:stop] - удаляет элементы с позиции start по позицию stop

my_list = list(range(7)) # создали список из 6 элементов
print("Исходный список", my_list) # Исходный список [0, 1, 2, 3, 4, 5, 6]

del my_list[:] # удаляем весь список
print(my_list) # []

my_list = list(range(7)) # создали список из 6 элементов
print("Исходный список", my_list) # Исходный список [0, 1, 2, 3, 4, 5, 6]

del my_list[0] # Чтобы удалить первый элемент
print("После удаления первого элемента", my_list) # После удаления первого элемента [1, 2, 3, 4, 5, 6]

del my_list[5] # Чтобы удалить элемент по индексу
print("После удаления элемента", my_list) # После удаления элемента [1, 2, 3, 4, 5]

del my_list[1:5] # Чтобы удалить несколько элементов
print("После удаления нескольких элементов", my_list) # После удаления нескольких элементов [1]



# ______________________________________ copy ___________________________________________
#  Операция копирования последовательности, эквивалентна выполнению выражения sequence[:].
x = [3, 6, 9, 12, 15, 18]
y = x.copy() # Создали копию списка x в список y.
y[2] = 20000 # Добавили число 2000 на индекс [2], в список y.
print(x) # Не изменился [3, 6, 9, 12, 15, 18]
print(y) # Измененная копия x [3, 6, 20000, 12, 15, 18]

#  *** Альтернативная операция создания копии списка.
z = x[:] # Создали копию списка x в список z.
z[-1] = 15000 # Добавили число 2000 на индекс [-1], в список z.
print(x) # Не изменился [3, 6, 9, 12, 15, 18]
print(z) # Измененная копия x [3, 6, 9, 12, 15, 15000]

# ________________________________________ count _______________________________________
# Список Python получил метод list.count () для подсчета возникновения определенных элементов в списке.
# list.count () Метод Подсчитывает появление конкретного значения/элемента данных,
# присутствующих в списке ввода.

list_in = ['Apple','Banana','Apple','Grapes','Jackfruit','Apple']
count = list_in.count('Apple') # Считаем сколько раз слово Apple встечается в списке list_in
                                  # и заносим колличество в переменную list_out
print(f'Слово Apple встечется {count} раз(а)') # Слово Apple встечется 3 раз(а)


list_in = [ ['Rat','Cat'], ['Heat','Beat'], ['Rat','Cat'] ]
count = list_in.count(['Rat','Cat']) # Считаем сколько раз список ['Rat','Cat'] встечается в списке list_in
                                        # и заносим колличество в переменную list_out
print(f"Cписок ['Rat','Cat'] встечется {count} раз(а)") # Cписок ['Rat','Cat'] встечется 2 раз(а)


elements = ['a', ('a', 'b'), ('a', 'b'), [3, 4]] # random list
count = elements.count(('a', 'b')) # count element ('a', 'b')
print("The count of ('a', 'b') is:", count) # The count of ('a', 'b') is: 2


count = elements.count([3, 4]) # count element [3, 4]
print("The count of [3, 4] is:", count) # The count of [3, 4] is: 1

# Допустим, мы хотим подсчитать каждый элемент в
# списке и сохранить его в другом списке или, скажем, в словаре:

lst = ['Cat', 'Bat', 'Sat', 'Cat', 'Mat', 'Cat', 'Sat']
# Чтобы получить количество вхождений каждого элемента в списке
print ([ [l, lst.count(l)] for l in set(lst)]) # [['Sat', 2], ['Mat', 1], ['Bat', 1], ['Cat', 3]]
# Чтобы получить количество вхождений каждого элемента в словаре
print (dict( (l, lst.count(l) ) for l in set(lst))) # {'Sat': 2, 'Mat': 1, 'Bat': 1, 'Cat': 3}

ls=["+7912123456","+79152123456","+69152123456","+49152123456","+791522222222"]
new_list = [num for num in ls if num.startswith('+7')] # ищем все элементы начинающие с '+7' и сохраняем в новый список
print(new_list) # ['+7912123456', '+79152123456', '+791522222222']

ls=["+7912123456","+79152123456","+69152123456","+49152123456","+791522222222"]
print(type(ls)) # <class 'list'>
new_list = [num for num in ls if not num.startswith('+7')] # (добавили not!!!) ищем все элементы  НЕ начинающие с '+7' и сохраняем в новый список
print(new_list) # ['+69152123456', '+49152123456']
print(type(new_list)) # <class 'list'>

# ____________________________________________ index _____________________________________________
# Метод index() возвращает индекс указанного элемента в списке.
# Метод в Python может принимать не более трех аргументов:
# element – элемент для поиска;
# start (необязательно) – начать поиск с этого индекса;
# end (необязательно) – искать элемент до этого индекса.
# list.index(element, start, end)

# Пример 1: Найти элемент индекса
vowels = ['a', 'e', 'i', 'o', 'i', 'u']

index = vowels.index('e')
print('Индекс e номер:', index) # Индекс e номер: 1

index = vowels.index('i')
print('Индекс i номер:', index) # Индекс i номер: 2

# # Пример 2: При отсутсвии элемента в списке
# # vowels list
# vowels = ['a', 'e', 'i', 'o', 'u']

# index = vowels.index('p') # ValueError: 'p' is not in list
# print('The index of p:', index)

# Пример 3: Работа с параметроми начала и конца
alphabets = ['a', 'e', 'i', 'o', 'i', 'i', 'g', 'u']

# index of 'i' in alphabets
index = alphabets.index('e')   # 1
print('The index of e:', index) # The index of e: 1

# 'i' после поиска 3-го индекса
index = alphabets.index('i', 3)   # 4 (на 4-й позиции первый раз встречается)
print('The index of i:', index) # The index of i: 4

# 'i' между 3-м и 6-м индексом ищется
index = alphabets.index('i', 3, 6)   # 4 (на 4-й позиции первый раз встречается)
print('The index of i:', index) # The index of i: 4

# ____________________________________________ insert _____________________________________________
# Метод list insert() вставляет элемент в список по указанному индексу.
# Метод принимает два параметра:  list.insert(i, elem)
# index — индекс, в который нужно вставить элемент;
# element — это элемент, который нужно вставить в список.

# Пример 1: Вставка элемента в список:
vowel = ['a', 'e', 'i', 'u']

vowel.insert(3, 'o') # 'o' вставляется в индексе 3
print('Updated List:', vowel) # Updated List: ['a', 'e', 'i', 'o', 'u']

# Пример 2: Вставка кортежа (как элемента) в список:
mixed_list = [{1, 2}, [5, 6, 7]]
number_tuple = (3, 4)

mixed_list.insert(1, number_tuple) # вставка кортежа на 1 индекс, в список
print('Updated List:', mixed_list) # Updated List: [{1, 2}, (3, 4), [5, 6, 7]]

# ____________________________________________ pop _____________________________________________
# Метод позволяет получить элемент по индексу удаляя его из последовательности.
# sequence.pop(i)
# sequence - изменяемый тип последовательности,
# i - индекс в последовательности, целое число.
# Необязательный аргумент - индекс i по умолчанию равен -1.

x = [2, 0, 3, 12, 'foo', 15, 100, 18]
f = x.pop() # по умолчанию -1. Записываем последний элемент в значение f и удаляем его.
print(f) # 18
print(x) # [2, 0, 3, 12, 'foo', 15, 100]

f = x.pop(-2) # записываем в f и удаляем предпоследний элемент в списке
print(f) # 15
print(x) # [2, 0, 3, 12, 'foo', 100]

f = x.pop(3) # записываем в f и удаляем 3 элемент в списке
print(f) # 12
print(x) # [2, 0, 3, 'foo', 100]

f = x.pop(3) # записываем в f и удаляем 3 элемент в списке
print(f) # 'foo'
print(x) # [2, 0, 3, 100]

# ____________________________________________ remove _____________________________________________
# remove() — удаляет первый встреченный элемент в списке, который соответствует условию.

my_list = ['A', 'B', 'C', 43, 'D', 'A', 43, 'E', 'F'] # создали список
print("Список", my_list) # Список ['A', 'B', 'C', 43, 'D', 'A', 43, 'E', 'F']

my_list.remove('A') # удаляем первый встреченный элемент 'A' в списке
print("С использованием remove()", my_list) # С использованием remove() ['B', 'C', 43, 'D', 'A', 43, 'E', 'F']

my_list.remove(43) # удаляем первый встреченный элемент, в данном случае число 43 в списке
print(my_list) # ['B', 'C', 'D', 'A', 43, 'E', 'F']



data_list = [-5, -23, 5, 0, 23, -6, 23, 67]
new_list = []

while data_list:
    minimum = data_list[0]  # arbitrary number in list
    for x in data_list: # проходим по всем элементам списка и находим наименьший
        if x < minimum:
            minimum = x
    new_list.append(minimum) # заносим наименьший элемент в конец нового списка
    data_list.remove(minimum) # удаляем наименьший элемент в начальном списке и
                              # возвраяемсся к поиску нового наименьшего в цикле for, по начальному списку.

print(new_list) # [-23, -6, -5, 0, 5, 23, 23, 67]

# ____________________________________________ reverse _____________________________________________
# Перестраивает элементы списка в обратном порядке.
# Операция позволяет развернуть элементы последовательности.
# Метод .reverse() изменяет последовательность не копируя для экономии памяти.
# То есть разворачивает саму последовательность sequence, а не ее копию.
# Метод .reverse() вызывает AttributeError, когда последовательностью неизменяема.

# Вариант 1. В этом случае мы изменяем исходный список:
my_list = [1, 'two', 'a', 4]
my_list.reverse()  # None
my_list  # [4, 'a', 'two', 1]

x = [2, 0, 3, 12, 'foo', 15, 100, 18]
x.reverse()
print(x)# [18, 100, 15, 'foo', 12, 3, 0, 2]

# x = (2, 0, 3, 12, 'foo', 15, 100, 18)
# x.reverse()
# print(x)
# Traceback (most recent call last):
# File "<stdin>", line 257, in <module>
# AttributeError: 'str' object has no attribute 'reverse'

# x = 'helloWorld'
# x.reverse()
# print(x)
# Traceback (most recent call last):
# File "<stdin>", line 264, in <module>
# AttributeError: 'str' object has no attribute 'reverse'

# Вариант 2. В этом случае мы НЕ изменяем исходный список:

numbers_asc = [1, 2, 3, 4, 5]
numbers_desc = numbers_asc[::-1] # разворачиваем список с последнего элемента.
print(numbers_asc) # [1, 2, 3, 4, 5]
print(numbers_desc) # [5, 4, 3, 2, 1]

vowels = ['a', 'e', 'i', 'o', 'u']
print(type(vowels)) # <class 'list'>
vowels_rev = list(reversed(vowels))
print(type(vowels_rev)) # <class 'list'>
print(vowels) # ['a', 'e', 'i', 'o', 'u']
print(vowels_rev) # ['u', 'o', 'i', 'e', 'a']

# ____________________________________________ sort _____________________________________________
# Метод list.sort() в Python сортирует элементы списка в порядке возрастания.
# В Python есть встроенная функция sorted(), которая используется для создания отсортированного
# списка из итерируемого объекта.

# Вариант № 1 ________________________________
# По умолчанию метод list sort() в Python упорядочивает элементы списка в порядке возрастания:
numbers_list = [3.4, -5.1, 2.2, 4.1, 1.0, 3.8]
print(f'До сортировки: {numbers_list}') # До сортировки: [3.4, -5.1, 2.2, 4.1, 1.0, 3.8]
numbers_list.sort()
print(f'После сортировки: {numbers_list}') # После сортировки: [-5.1, 1.0, 2.2, 3.4, 3.8, 4.1]

# Элементы также могут быть символами или числами, и метод sort() продолжит сортировку в порядке возрастания.
str_list = ['a', 'c', 'd', 'b', 'B', 'C', '1']
str_list.sort()
print(str_list)  # ['1', 'B', 'C', 'a', 'b', 'c', 'd']

# Вариант №2 __________________________________
# Обратная сортировка списка:
numbers_list = [3.4, 5.1, 2.2, -4.1, 1.0, 3.8]
print(f'До сортировки: {numbers_list}') # [3.4, 5.1, 2.2, -4.1, 1.0, 3.8]
numbers_list.sort(reverse = True) # (реверс = Истина)
print(f'После сортировки: {numbers_list}') # После сортировки: [5.1, 3.8, 3.4, 2.2, 1.0, -4.1]

# Вариант №3 : _________________________________
# Сортировка вложеного списка:
# Если мы вызываем функцию списка sort() для вложенного списка,
# то ортировка производится по первому элементу вложенного списка.
numbers = [[1, 2], [2, 1], [-4, 3], [5, 2], [3, 3]]
print(f'До сортировки: {numbers}') # До сортировки: [[1, 2], [2, 1], [-4, 3], [5, 2], [3, 3]]
numbers.sort()
print(f'После сортировки: {numbers}') # После сортировки: [[-4, 3], [1, 2], [2, 1], [3, 3], [5, 2]]

# Но иногда нам нужно отсортировать вложенный список по позициям разных элементов.
# Допустим, вложенный список содержит информацию об имени, возрасте и поле человека.
# Давайте посмотрим, как отсортировать этот вложенный список по возрасту,
# который является вторым элементом вложенного списка

def custom_key(people):
    return people[1]  # второй параметр обозначает возраст
    # Мы используем ключевой аргумент, чтобы указать элемент,
    # который будет использоваться для целей сортировки.
    # Функция custom_key возвращает ключ для сортировки списка.
persons = [['Alice', 26, 'F'], ['Trudy', 25, 'M'], ['Bob', 25, 'M'], ['Alexa', 22, 'F']]
print(f'До сортировки: {persons}') # До сортировки: [['Alice', 26, 'F'], ['Trudy', 25, 'M'], ['Bob', 25, 'M'], ['Alexa', 22, 'F']]
persons.sort(key=custom_key)
print(f'После сортировки: {persons}') # После сортировки: [['Alexa', 22, 'F'], ['Trudy', 25, 'M'], ['Bob', 25, 'M'], ['Alice', 26, 'F']]


# Но есть такая поговорка: «Сначала дамы!».
# Итак, мы хотим отсортировать наш список таким образом,
# чтобы женский пол имел приоритет над мужским. Если пол двух человек совпадает,
# младший получает более высокий приоритет.
# Итак, нам нужно импортировать библиотеку под названием functools.
# Мы будем использовать функцию cmp_to_key(), чтобы преобразовать compare_function в key.
import functools

def compare_function(person_a, person_b):
    if person_a[2] == person_b[2]:  # if their gender become same
        return person_a[1] - person_b[1]  # return True if person_a is younger
    else:  # if their gender not matched
        if person_b[2] == 'Ж':  # give person_b first priority if she is female
            return 1
        else:  # otherwise give person_a first priority
            return -1

persons = [['Екатерина', 26, 'Ж'], ['Егор', 25, 'М'], ['Олег', 24, 'М'], ['Варвара', 22, 'Ж']]
print(f'До сортировки: {persons}') # До сортировки: [['Екатерина', 26, 'Ж'],
                                   # ['Егор', 25, 'М'], ['Олег', 24, 'М'], ['Варвара', 22, 'Ж']]
persons.sort(key=functools.cmp_to_key(compare_function))
print(f'После сортировки: {persons}') # После сортировки: [['Варвара', 22, 'Ж'],
                                      # ['Екатерина', 26, 'Ж'], ['Олег', 24, 'М'], ['Егор', 25, 'М']]
