# ======================================================= Методы в str (строка): ==============================================================

#          'capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'format_map',
#          'index', 'isalnum', 'isalpha', 'isascii', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable',
#          'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'removeprefix',
#          'removesuffix', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines',
#                             'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill'

# =============================================================================================================================================
#                                                    ________Базовые операции________
# Конкатенация (сложение) __________
s1 = 'spam'
s2 = 'eggs'
print(s1 + s2) # # spameggs

# Дублирование строки ___________
# print('spam' * 3)
s = 'spam'
s1 = 'spam' * 3
print(s1) # spamspamspam

# Длина строки (функция len) __________
print(len(s1)) # 12

# Доступ по индексу __________
s2 = 'kdfj4i44olw'
print(s2[2]) # f
print(s2[-1]) # w
print(s2[4]) # 4

# Извлечение среза ___________
# Оператор извлечения среза: [X:Y]. X – начало среза, а Y – окончание;
# символ с номером Y в срез не входит. По умолчанию первый индекс равен 0, а второй - длине строки.
print(s2[3:5]) # j4
print(s2[2:-2]) # fj4i44o
print(s2[:6]) # kdfj4i
print(s2[1:]) # dfj4i44olw
print(s2[:]) # kdfj4i44olw

# Кроме того, можно задать шаг, с которым нужно извлекать срез.
print(s2[::-1]) # wlo44i4jfdk
print(s2[5:3:-1]) # i4
print(s2[2::2]) # f44ow

# При вызове методов необходимо помнить, что строки в Python относятся к категории неизменяемых последовательностей,
# то есть все функции и методы могут лишь создавать новую строку.
s = 'spam'
# s[1] = 'b' # TypeError: 'str' object does not support item assignment

s1 = s[0] + 'b' + s[2:] # индекс 0 + b + всё со втрокого индекса. итог - замена 1 индекса
print(s1) # sbam

# ___________________________________________________ 'capitalize'(печатать прописными буквами) ___________________________________________________
# Переводит первый символ/букву строки в верхний регистр.
x = 'первый символ теперь пОмещается в Заглавный, а не в верХний регистр'
print(x.capitalize()) # Первый символ теперь помещается в заглавный, а не в верхний регистр
x2 = x.capitalize()
print(x2) # Первый символ теперь помещается в заглавный, а не в верхний регистр

x = 'ПОМЕЩАЕТСЯ В ЗАГЛАВНЫЙ, А НЕ В ВЕРХНИЙ РЕГИСТР'
print(x.capitalize()) # Помещается в заглавный, а не в верхний регистр
x2 = x.capitalize()
print(x2) # Помещается в заглавный, а не в верхний регистр

# ____________________________________________________________ 'casefold' (чехол) _________________________________________________________________
# Метод .casefold() используется для реализации сопоставления строк без регистра.
# Сворачивание регистра похоже на использование нижнего регистра,
# но более агрессивно, потому что функция casefold() более агрессивна,
# поскольку она преобразует все строковые символы в строчные.
# Она предназначена для удаления всех различий в регистре в строке.
# Функция casefold() не принимает никаких параметров.
# Функция casefold()  возвращает копию строки с свернутым регистром,
# т.е. строка преобразуется в нижний регистр. Это не изменяет исходную строку.

# Пример 1. Преобразование строки в нижний регистр с помощью casefold()
text = "PYTHON CASEFOLD EXAMPLE"
print ("Строчная строка:", text.casefold()) # Строчная строка: python casefold example

# Пример 2. Сравнение строк с помощью функции casefold()
str1 = "Pythonß"
str2 = "Pythonss"
# ß в немецком эквивалентно ss
if str1.casefold() == str2.casefold():
    print('Данные строки равны.')
else:
    print('Данные строки не равны.')
#  >>> Данные строки равны.

# ____________________________________________________________ 'center' (центр) _________________________________________________________________
# Функция str.center() в Python возвращает центрированную строку указанного размера.
# Мы также можем указать символ, который будет использоваться для заполнения, по умолчанию – пробел.
# Синтаксис функции:
# str.center(ширина[, заполняющий символ])
s = 'Hello'
s1 = s.center(20)       # Значение хранящееся в переменной s отцентровали на 20 пунктов,
                        # и новое значение записали в переменную s1
print(f'***{s1}***')    # ***       Hello        ***

s = 'Hello'
s1 = s.center(20, '_')  # Значение хранящееся в переменной s отцентровали на 20 пунктов,
                        # добавили символ вместо пробела,
                        # и новое значение записали в переменную s1
print(f'***{s1}***')    # ***_______Hello________***

s = 'Hello World' # в перемнной s храниться строка состоящяя из 11 знаков,
                  # по этому только при значении выше 11 знаков появляется символ *
print(s.center(6, '*')) # Hello World
print(s.center(12, '*')) # Hello World*
print(s.center(11, '*')) # Hello World























# Метод count() строки возвращает количество вхождений подстроки в заданной строке.
# Проще говоря, метод ищет подстроку в заданной строке и возвращает, сколько раз подстрока присутствует в ней.
# string.count(substring, start=..., end=...)
# substring ‒ строка, количество которой нужно найти.
# start (необязательно) ‒ начальный индекс в строке, с которой начинается поиск.
# end (необязательно) ‒ конечный индекс в строке, где заканчивается поиск.

string = "Python прекрасен, очень прекрасен, не так ли?"
# substring = "не"
count = string.count('е')
print("Количество:", count) # Количество: 6
# ИЛИ
string = "Python прекрасен, очень прекрасен, не так ли?"
# substring = "е"
count = string.count('е', 8, 25)
print("Количество:", count) # Количество: 3