from telegram import Update
from telegram.ext import ContextTypes
from spy import *
from translator_deyweek import *
from function_calculator import *
from new_year_function import *
from text_function import *
from moon_function import *
from game_function import *
from time import sleep
import datetime
import emoji
import weather
import requests
from weather_update.weather import get_weather




async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    log(update, context)
    await update.message.reply_text(f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π {update.effective_user.first_name} ' + emoji.emojize('ü§ì\n') +
                                    '–í—ã –≤–∏–¥–∏—Ç–µ –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: \n/hi -> –Ø –∑–¥–æ—Ä–æ–≤–∞—é—Å—å ' + emoji.emojize('ü§ù\n') +
                                    '/dt -> –ü–æ–∫–∞–∂—É –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è ' + emoji.emojize('üìÖ\n') +
                                    '/tem -> –ü–æ–∫–∞–∂—É —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤–æ–∑–¥—É—Ö–∞ –≤ –≥.–ö–∏—Ä–æ–≤ ' + emoji.emojize('üå°Ô∏è\n')+
                                    '/moon -> –†–∞—Å—Å–∫–∞–∂—É –æ —Ñ–∞–∑–∞—Ö –ª—É–Ω—ã ' + emoji.emojize('üåñ\n') +
                                    '/new -> –ü–æ—Å—á–∏—Ç–∞—é –≤—Ä–µ–º—è –¥–æ –Ω–æ–≤–æ–≥–æ –≥–æ–¥–∞' + emoji.emojize('üå≤\n')+
                                    '/echo -> –ë—É–¥—É –ø–æ–≤—Ç–æ—Ä—è—Ç—å –≤—Å–µ –í–∞—à–∏ —Ñ—Ä–∞–∑—ã ' + emoji.emojize('üì£\n') +
                                    '/call -> –Ø –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä' + emoji.emojize('üßÆ\n') +
                                    '/ph -> –ú—É–¥—Ä–æ—Å—Ç—å –¥–Ω—è' + emoji.emojize('üìë\n')+
                                    '/game -> –ò–≥—Ä–∞ ' + emoji.emojize('‚ùå ') + emoji.emojize('‚≠ï\n') +
                                    '/help -> –û–∫–∞–∂—É –ø–æ—Å–∏–ª—å–Ω—É—é –º–Ω–µ –ø–æ–º–æ—â—å ' + emoji.emojize('‚ÅâÔ∏è'))




async def hello_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    '''–ó–¥–æ—Ä–æ–≤–∞—é—Å—å + –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ'''
    log(update, context)
    await update.message.reply_text(f'Hello {update.effective_user.first_name} ' + emoji.emojize(':handshake:'))




async def echo_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    '''–≠—Ö–æ –æ—Ç–≤–µ—Ç + –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ'''
    log(update, context)
    if update.message.text.split(' ')[1:] == []:
        await update.message.reply_text(f'–ù–µ –≤–µ—Ä–Ω–æ –í—ã {update.effective_user.first_name} –≤–≤–æ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç' + emoji.emojize('üòâ\n')+
                                        f'–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É —Å—Ä–∞–∑—É –∑–∞ –Ω–µ–π —Ç–µ–∫—Å—Ç.\n'
                                       f'–ü—Ä–∏–º–µ—Ä: /echo –ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?')
    else:
        in_text = update.message.text.split(' ')[1:]
        out_text = ' '.join(in_text)
        await update.message.reply_text(out_text)




async def call_command(update: Update, context: CallbackContext):
    '''–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä'''
    log(update, context)
    # await update.message.reply_text(calc(update.message.text.split(' ')[1]))
    if update.message.text.split(' ')[1:] == []:
        await update.message.reply_text(f'{update.effective_user.first_name},\n'
                                        f'–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É —Å—Ä–∞–∑—É –∑–∞ –Ω–µ–π —Ç–æ, —á—Ç–æ –º–Ω–µ –Ω—É–∂–Ω–æ –ø–æ—Å—á–∏—Ç–∞—Ç—å.\n'
                                       f'–ü—Ä–∏–º–µ—Ä: /call (3+2)*2')
    else:
        result = calc(update.message.text.split(' ')[1])
        x = update.message.text.split(' ')[1:]
        text = ' '.join(x)
        await update.message.reply_text(f'{text} = {result}')





async def time_command(update: Update, context: CallbackContext):
    '''–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –¥–∞—Ç–∞, –≤—Ä–µ–º—è + –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ'''
    log(update, context)
    await update.message.reply_text(f'{change(dey_week)}  '
                                    f'{datetime.datetime.today().strftime("%d.%m.%Y")}\n'
                                    f'        {datetime.datetime.today().strftime("%H:%M:%S")}')




async def tem_command(update: Update, context: CallbackContext):
    '''–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞(–≥–æ—Ä–æ–¥ —É–∫–∞–∑–∞–Ω –≤ –∫–æ–¥–µ) + –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ'''
    log(update, context)
    '''–ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥ –Ω–µ –≤–µ—Ä–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É. –ü–æ–∑–∂–µ –µ–≥–æ –∏–∑—É—á—É.'''
    try:
        weather = get_weather("Kirov,RU")
        await update.message.reply_text(f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞\n–≤ –≥–æ—Ä–æ–¥–µ –ö–∏—Ä–æ–≤: {weather['main']['temp']}¬∞C " + emoji.emojize('üå°Ô∏è\n'))
    except:
        await update.message.reply_text(f'–°–µ—Ä–≤–µ—Ä –Ω–µ –≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥ –ø–æ–∑–∂–µ.')



async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    '''–í—ã–≤–æ–¥ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ + –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ'''
    log(update, context)
    await update.message.reply_text(f'/hi -> –ó–¥–æ—Ä–æ–≤–∞—é—Å—å.\n'+
                                    '/dt -> –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –¥–∞—Ç–∞, –≤—Ä–µ–º—è.\n'+
                                    '/tem -> –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞ –≤ –≥.–ö–∏—Ä–æ–≤\n'+
                                    '/moon -> –§–∞–∑—ã –ª—É–Ω—ã.\n'
                                    '/new -> –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –Ω–æ–≤–æ–≥–æ –≥–æ–¥–∞\n'+
                                    '/echo -> –ü–æ–≤—Ç–æ—Ä—é –í–∞—à—É —Ñ—Ä–∞–∑—É.\n'+
                                    '/call -> –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä.\n'+
                                    '/game -> –ò–≥—Ä–∞ "–•/–û".\n'+
                                    '/ph -> –ú—É–¥—Ä–æ—Å—Ç—å –¥–Ω—è')




async def new_year_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    log(update, context)
    await update.message.reply_text(new_year())



async def open_text_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    log(update, context)
    await update.message.reply_text(open_text())


async def moon_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    log(update, context)
    await update.message.reply_text(f'–°–µ–≥–æ–¥–Ω—è {moon_day()} –ª—É–Ω–Ω—ã–π –¥–µ–Ω—å.\n'+
                                    f'{moon_age()}\n{percent_moon()}\n{moon_phase()}')



async def message_processing(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—ã—Ä–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ —á–∞—Ç–µ"""
    if update.message.text[0] != '/':
        if game.game_status:
            ''' –∑–∞–ø—É—â–µ–Ω–∞ –∏–≥—Ä–∞
                —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞'''
            try:
                matches = int(update.message.text)
            except:
                await update.message.reply_text('–Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –æ—Ç–≤–µ—Ç. –ù–∞–ø–∏—à–∏—Ç–µ —Ü–∏—Ñ—Ä–æ–π, –∫–∞–∫—É—é –ø–æ–∑–∏—Ü–∏—é –≤—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ.')
                return
            if not 0 < matches < 10:
                await update.message.reply_text('–í—ã –≤—ã—à–ª–∏ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è')
                return
            game.action_player(matches)
            if game.check_game_state():
                await update.message.reply_text(f'–£—Ä–∞–∞–∞–∞–∞–∞–∞!\n\n{game.showMatrix()} \n–ü–æ–∑–¥—Ä–∞–≤–ª—è—é –≤–∞—Å!\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!!!')
                game.stop()
                return
            if game.check_drawn_game():
                await update.message.reply_text(f'{game.showMatrix()} \n–ù–∏—á—å—è')
                game.stop()
                return
            message = f'–í–∞—à —Ö–æ–¥: \n{game.showMatrix()}'
            await update.message.reply_text(message)
            sleep(1)
            '''—Ö–æ–¥ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞'''
            game.action_cpu()
            message = f'–•–æ–¥ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞: \n{game.showMatrix()}'
            await update.message.reply_text(message)
            sleep(1)
            if game.check_game_state():
                message = f'–Ø –≤—ã–∏–≥—Ä–∞–ª'
                await update.message.reply_text(message)
                game.stop()
                return
            if game.check_drawn_game():
                await update.message.reply_text(f'{game.showMatrix()} \n–ù–∏—á—å—è')
                game.stop()
                return
            message = '–í–∞—à —Ö–æ–¥'
            await update.message.reply_text(message)
            return



async def game_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    '''–ò–≥—Ä–∞ –• & –û'''
    log(update, context)
    if not game.game_status:
        game.start()
        message = f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ {update.effective_user.first_name}!\n–í—ã –≥–æ—Ç–æ–≤—ã —Å–æ –º–Ω–æ–π —Å—ã–≥—Ä–∞—Ç—å –≤ {game.help}' + emoji.emojize(' ü§ì\n')
        sleep(1)
        await update.message.reply_text(message)
        message = f'* –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å *\n * –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ *\n{game.showMatrix()}\n'
        sleep(2)
        await update.message.reply_text(message)
        if randint(1, 100) > 50:
            message = '–Ø —Ö–æ–∂—É –ø–µ—Ä–≤—ã–π\n'
            sleep(1)
            await update.message.reply_text(message)
            game.action_cpu()
            message = f'–•–æ–¥ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞: \n{game.showMatrix()}'
            await update.message.reply_text(message)
            sleep(1)
            await update.message.reply_text(f'–í–∞—à —Ö–æ–¥')
        else:
            message = '–í–∞—à —Ö–æ–¥'
            await update.message.reply_text(message)

game = Game()