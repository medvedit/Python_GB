from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from spy import *
from translator_deyweek import *
from function_calculator import *
from new_year_function import *
from text_function import *
import datetime
import emoji
import weather



async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π {update.effective_user.first_name} ' + emoji.emojize('ü§ì\n') +
                                    '–í—ã –≤–∏–¥–∏—Ç–µ –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: \n/hi -> –Ø –∑–¥–æ—Ä–æ–≤–∞—é—Å—å ' + emoji.emojize('ü§ù\n') +
                                    '/echo -> –ë—É–¥—É –ø–æ–≤—Ç–æ—Ä—è—Ç—å –≤—Å–µ –í–∞—à–∏ —Ñ—Ä–∞–∑—ã ' + emoji.emojize('üì£\n') +
                                    '/dt -> –ü–æ–∫–∞–∂—É –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è ' + emoji.emojize('üìÖ\n') +
                                    '/tem -> –ü–æ–∫–∞–∂—É —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤–æ–∑–¥—É—Ö–∞ –≤ –≥.–ö–∏—Ä–æ–≤ ' + emoji.emojize('üå°Ô∏è\n')+
                                    '/call -> –Ø –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä' + emoji.emojize('üßÆ\n') +
                                    '/new -> –ü–æ—Å—á–∏—Ç–∞—é –≤—Ä–µ–º—è –¥–æ –Ω–æ–≤–æ–≥–æ –≥–æ–¥–∞' + emoji.emojize('üå≤\n')+
                                    '/text -> –ú—É–¥—Ä–æ—Å—Ç—å –¥–Ω—è' + emoji.emojize('üìë\n')+
                                    '/help -> –û–∫–∞–∂—É –ø–æ—Å–∏–ª—å–Ω—É—é –º–Ω–µ –ø–æ–º–æ—â—å ' + emoji.emojize('‚ÅâÔ∏è'))




async def hello_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    '''–ó–¥–æ—Ä–æ–≤–∞—é—Å—å + –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ'''
    log(update, context)
    await update.message.reply_text(f'Hello {update.effective_user.first_name} ' + emoji.emojize(':handshake:'))




async def echo_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    '''–≠—Ö–æ –æ—Ç–≤–µ—Ç + –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ'''
    log(update, context)
    if update.message.text.split(' ')[1:] == []:
        await update.message.reply_text(f'–ù–µ –≤–µ—Ä–Ω–æ –í—ã {update.effective_user.first_name} –≤–≤–æ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç' + emoji.emojize('üòâ\n')+
                                        f'–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É —Å—Ä–∞–∑—É –∑–∞ –Ω–µ–π —Ç–µ–∫—Å—Ç.\n'
                                       f'–ü—Ä–∏–º–µ—Ä: /echo –ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?')
    else:
        in_text = update.message.text.split(' ')[1:]
        out_text = ' '.join(in_text)
        await update.message.reply_text(out_text)




async def call_command(update: Update, context: CallbackContext):
    '''–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä'''
    log(update, context)
    # await update.message.reply_text(calc(update.message.text.split(' ')[1]))
    if update.message.text.split(' ')[1:] == []:
        await update.message.reply_text(f'{update.effective_user.first_name},\n'
                                        f'–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É —Å—Ä–∞–∑—É –∑–∞ –Ω–µ–π —Ç–æ, —á—Ç–æ –º–Ω–µ –Ω—É–∂–Ω–æ –ø–æ—Å—á–∏—Ç–∞—Ç—å.\n'
                                       f'–ü—Ä–∏–º–µ—Ä: /call (3+2)*2')
    else:
        result = calc(update.message.text.split(' ')[1])
        x = update.message.text.split(' ')[1:]
        text = ' '.join(x)
        await update.message.reply_text(f'{text} = {result}')





async def time_command(update: Update, context: CallbackContext):
    '''–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –¥–∞—Ç–∞, –≤—Ä–µ–º—è + –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ'''
    log(update, context)
    await update.message.reply_text(f'{change(dey_week)}  '
                                    f'{datetime.datetime.today().strftime("%d.%m.%Y")}\n'
                                    f'        {datetime.datetime.today().strftime("%H:%M:%S")}')




async def tem_command(update: Update, context: CallbackContext):
    '''–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞(–≥–æ—Ä–æ–¥ —É–∫–∞–∑–∞–Ω –≤ –∫–æ–¥–µ) + –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ'''
    log(update, context)
    await update.message.reply_text(f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞\n–≤ –≥–æ—Ä–æ–¥–µ –ö–∏—Ä–æ–≤:'
                    f'{weather.forecast("Kirov", unit=weather.CELSIUS).tomorrow[datetime.datetime.today().strftime("%H:%M")].temp}'+
                        emoji.emojize('üå°Ô∏è'))




async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    '''–í—ã–≤–æ–¥ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ + –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ'''
    log(update, context)
    await update.message.reply_text(f'/hi -> –ó–¥–æ—Ä–æ–≤–∞—é—Å—å.\n'+
                                    '/dt -> –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –¥–∞—Ç–∞, –≤—Ä–µ–º—è.\n'+
                                    '/echo -> –ü–æ–≤—Ç–æ—Ä—é –í–∞—à—É —Ñ—Ä–∞–∑—É.\n'+
                                    '/call -> –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä.\n'+
                                    '/tem -> –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞ –≤ –≥.–ö–∏—Ä–æ–≤\n'+
                                    '/new -> –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –Ω–æ–≤–æ–≥–æ –≥–æ–¥–∞\n'+
                                    '/text -> –ú—É–¥—Ä–æ—Å—Ç—å –¥–Ω—è')




async def new_year_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    log(update, context)
    await update.message.reply_text(new_year())



async def open_text_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    log(update, context)
    await update.message.reply_text(open_text())