import datetime
import emoji

def moon_day(): # Функция вычисления лунного дня на основе вычисленной юлианской даты.
    now_data = datetime.datetime.today() # Текущая дата и время. Онлайн.
    date_start_count = datetime.datetime(1970, 1, 1) # Дата начало отсчета.
    data = now_data - date_start_count

    mm, ss = divmod(data.seconds, 60) # divmod(dividend, divisor) - Производит деление чисел с остатком:
                                    # dividend - делимое, число, которое вы хотите разделить
                                    # divisor - делитель, число, на которое вы хотите делить
    hh, mm = divmod(mm, 60)
    # print('Итого разница составила: {} дней {} часа {} мин {} сек.'.format(data.days, hh, mm, ss)) # можно посмотреть количество дней
                                                                                        # мин и сек текущей даты по начало отчета.

    mm_s = mm * 60 # В одной минуте 60 сек.
    hh_s = hh * 3600 # В одном часе 3600 сек.
    days_s = data.days * 86400 # В одних сутках 86400 сек.
    sum_s = mm_s + hh_s + days_s + ss # Вычислил количество сек за весь период.
    # print(sum_s) # Можно посмотреть общее количество секунд в переменной data

    Julian_day = (sum_s / 86400) + 2440587.5 # вычислил юлианскую дату.

    '''Вычисление номера дня по юлианскому календарю
    Перво-наперво следует узнать юлианскую дату – одно из основных значений,
    необходимых для дальнейших вычислений. Есть несколько основных формул и алгоритмов разной степени громоздкости,
    однако можно пойти куда более простым путем и воспользоваться временем UNIX. Известно, что:
    UNIXTIME = (JD – 2440587.5) * 86400

    Значит
    JD = (UNIXTIME / 86400) + 2440587.5
    где UNIXTIME – количество секунд, прошедших с 1 января 1970 года.
    То, что в полученном результате идет до десятичной точки – номер юлианского дня (JDN); после точки – текущее время.
    использовал ресурс -> https://notesuse.blogspot.com/2017/12/python.html'''



    '''Идея алгоритма необычайно проста (видимо, потому его все и используют).
    Заданная дата переводится в Юлианские дни (вот они и пригодились), после чего вычисляется число дней,
    прошедшее с магической юлианской даты 2451550.1
    Это 14:24 6 января 2000 года — и я подозреваю, что это просто начало очередного лунного месяца на момент разработки алгоритма.
    Полученная разница в днях делится на продолжительность лунного месяца — 29.530588853,
    и остаток от деления позволяет определить возраст луны. Где возраст, там и фаза.'''

    difference_day = Julian_day - 2451550.1 # Вычислил разницу в количестве дней.
    lunar_day = round(difference_day % 29.530588853, 2) # Остаток от деления равен - Лунный день. ))))

    return lunar_day



def moon_age():  # Функция вывода возраста луны в бот.
    day = moon_day()
    if day >= 0 and day <= 14.765: # 14.765 - это половина цикла луны. До этого значения рос, далее убывание.
        return 'Возраст: Растущая луна.'
    else:
        return 'Возраст: Убывающая луна.'



def moon_phase(): # Функция вывода фазы луны относительно лунного дня.
    day = moon_day()
    if day > 29 or day > 0 and day < 2:
        return 'Фаза: Новолуние. ' + emoji.emojize('🌑')
    if day > 2 and day < 6:
        return 'Фаза: Между новолунием и первой четвертью. ' + emoji.emojize('🌒')
    if day > 6 and day < 10:
        return 'Фаза: Первая четверть. ' + emoji.emojize('🌓')
    if day > 10 and day < 13:
        return 'Фаза: Между первой четвертью и полнолунием. ' + emoji.emojize('🌔')
    if day > 13 and day < 17:
        return 'Фаза: Полнолуние. ' + emoji.emojize('🌕')
    if day > 17 and day < 21:
        return 'Фаза: Между полнолунием и третьей четвертью. ' + emoji.emojize('🌖')
    if day > 21 and day < 24:
        return 'Фаза: Третья четверть. ' + emoji.emojize('🌗')
    if day > 24 and day < 29:
        return 'Фаза: Между третьей четвертью и новолунием. ' + emoji.emojize('🌘')


'''Мой подсчет может отличаться от онлайн калькуляторов лунного дня, тк у меня используется данные до секунд,
а не фиксированное время, как во многих, по гринвичу.'''

'''И самое главное Я ТОЛЬКО УЧУСЬ..'''

'''Сверял лунный день тут -> https://planetcalc.ru/524/'''
'''Сверял Юлианскую дату тут -> https://planetcalc.ru/503/'''


'''Относительно полнолуния на 14.765 суток лунного календаря, процент видимости луны растет или уменьшается.'''
def percent_moon(): # Функция вывода возраста луны в процентах от полной.
    m_day = moon_day()
    if m_day >= 0 and m_day <= 14.765: # 14.765 - середина лунного цикла, полнолуние.
        b = float(14.765)
        c = 100 - ((b - m_day) / b * 100) # Вычисление процента видимости луны, при росте луны.
        return f'Видимость луны (% от полной) = {round(c, 7)}%' + emoji.emojize('📈')
    else:
        b = float(14.765)
        c = 100 - ((m_day - b) / b * 100) # Вычисление процента видимости луны после полнолуния.
        return f'Видимость луны (% от полной) = {round(c, 7)}%' +  emoji.emojize('📉')

